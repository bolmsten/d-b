image: node:10

stages:
  - test
  - build-test
  - build
  - autodeploy

test:
  stage: test
  script:
    - npm install
    - NODE_ENV=ci npm run test
  tags:
    - docker

build-test:
  stage: build-test
  script:
    - npm install --only=production
    - npm run tsc
  tags:
    - docker
  except:
    - develop

docker build:
  image: docker:stable
  stage: build
  script:
    - docker info
    - docker build . -t dmsc/duo-backend
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
    - docker push dmsc/duo-backend
  tags:
    - docker
  only:
    - develop

autodeploy-test:
  image: ubuntu:latest
  stage: autodeploy
  environment:
    name: test
    url: https://useroffice-test.esss.lu.se/graphql
  script:
    - echo $CI_COMMIT_SHA
    - apt-get update -qq
    - "which ssh-agent || ( apt-get install -qq openssh-client )"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_GEN")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh jekabskarklins@scicat09.esss.lu.se "/home/jekabskarklins/duo-kubernetes/backend/autodeploy.sh dev"
  tags:
    - dind
  only:
    - develop
    - adding-environments

autodeploy-production:
  image: ubuntu:latest
  stage: autodeploy
  environment:
    name: production
    url: https://useroffice.ess.eu/
  script:
    - echo $CI_COMMIT_SHA
    - apt-get update -qq
    - "which ssh-agent || ( apt-get install -qq openssh-client )"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_GEN")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    #- ssh jekabskarklins@scicat09.esss.lu.se "/home/jekabskarklins/duo-kubernetes/backend/autodeploy.sh prod"
  when: manual
  tags:
    - dind
  only:
    - master
